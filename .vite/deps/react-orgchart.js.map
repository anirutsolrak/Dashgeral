{
  "version": 3,
  "sources": ["../../node_modules/react-orgchart/index.js"],
  "sourcesContent": ["\"use strict\";\n\nvar React = require('react');\n\nvar OrgChart = function OrgChart(_ref) {\n  var tree = _ref.tree,\n      NodeComponent = _ref.NodeComponent;\n\n\n  var renderChildren = function renderChildren(node) {\n\n    var hasSiblingRight = function hasSiblingRight(childIndex) {\n      return (node.children || []).length > childIndex + 1;\n    };\n\n    var hasSiblingLeft = function hasSiblingLeft(childIndex) {\n      return childIndex > 0;\n    };\n\n    var nodeLineBelow = React.createElement(\n      \"td\",\n      { colSpan: (node.children || []).length * 2, className: \"nodeGroupCellLines\" },\n      React.createElement(\n        \"table\",\n        { className: \"nodeLineTable\" },\n        React.createElement(\n          \"tbody\",\n          null,\n          React.createElement(\n            \"tr\",\n            null,\n            React.createElement(\"td\", { colSpan: 2, className: \"nodeLineCell nodeGroupLineVerticalMiddle\" }),\n            React.createElement(\"td\", { colSpan: 2, className: \"nodeLineCell\" })\n          )\n        )\n      )\n    );\n\n    var childrenLinesAbove = (node.children || []).map(function (child, childIndex) {\n      return React.createElement(\n        \"td\",\n        { colSpan: \"2\", className: \"nodeGroupCellLines\", key: childIndex },\n        React.createElement(\n          \"table\",\n          { className: \"nodeLineTable\" },\n          React.createElement(\n            \"tbody\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\"td\", { colSpan: 2, className: \"nodeLineCell nodeGroupLineVerticalMiddle\" + (hasSiblingLeft(childIndex) ? ' nodeLineBorderTop' : '') }),\n              React.createElement(\"td\", { colSpan: 2, className: \"nodeLineCell\" + (hasSiblingRight(childIndex) ? \" nodeLineBorderTop\" : \"\") })\n            )\n          )\n        )\n      );\n    });\n\n    var children = (node.children || []).map(function (child, childIndex) {\n      return React.createElement(\n        \"td\",\n        { colSpan: \"2\", className: \"nodeGroupCell\", key: childIndex },\n        renderChildren(child)\n      );\n    });\n\n    return React.createElement(\n      \"table\",\n      { className: \"orgNodeChildGroup\" },\n      React.createElement(\n        \"tbody\",\n        null,\n        React.createElement(\n          \"tr\",\n          null,\n          React.createElement(\n            \"td\",\n            { className: \"nodeCell\", colSpan: (node.children || []).length * 2 },\n            React.createElement(NodeComponent, { node: node })\n          )\n        ),\n        React.createElement(\n          \"tr\",\n          null,\n          (node.children || []).length > 0 && nodeLineBelow\n        ),\n        React.createElement(\n          \"tr\",\n          null,\n          childrenLinesAbove\n        ),\n        React.createElement(\n          \"tr\",\n          null,\n          children\n        )\n      )\n    );\n  };\n\n  return React.createElement(\n    \"div\",\n    { className: \"reactOrgChart\" },\n    renderChildren(tree)\n  );\n};\n\nmodule.exports = OrgChart;"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAEA,QAAI,QAAQ;AAEZ,QAAI,WAAW,SAASA,UAAS,MAAM;AACrC,UAAI,OAAO,KAAK,MACZ,gBAAgB,KAAK;AAGzB,UAAI,iBAAiB,SAASC,gBAAe,MAAM;AAEjD,YAAI,kBAAkB,SAASC,iBAAgB,YAAY;AACzD,kBAAQ,KAAK,YAAY,CAAC,GAAG,SAAS,aAAa;AAAA,QACrD;AAEA,YAAI,iBAAiB,SAASC,gBAAe,YAAY;AACvD,iBAAO,aAAa;AAAA,QACtB;AAEA,YAAI,gBAAgB,MAAM;AAAA,UACxB;AAAA,UACA,EAAE,UAAU,KAAK,YAAY,CAAC,GAAG,SAAS,GAAG,WAAW,qBAAqB;AAAA,UAC7E,MAAM;AAAA,YACJ;AAAA,YACA,EAAE,WAAW,gBAAgB;AAAA,YAC7B,MAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA,MAAM;AAAA,gBACJ;AAAA,gBACA;AAAA,gBACA,MAAM,cAAc,MAAM,EAAE,SAAS,GAAG,WAAW,2CAA2C,CAAC;AAAA,gBAC/F,MAAM,cAAc,MAAM,EAAE,SAAS,GAAG,WAAW,eAAe,CAAC;AAAA,cACrE;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,YAAI,sBAAsB,KAAK,YAAY,CAAC,GAAG,IAAI,SAAU,OAAO,YAAY;AAC9E,iBAAO,MAAM;AAAA,YACX;AAAA,YACA,EAAE,SAAS,KAAK,WAAW,sBAAsB,KAAK,WAAW;AAAA,YACjE,MAAM;AAAA,cACJ;AAAA,cACA,EAAE,WAAW,gBAAgB;AAAA,cAC7B,MAAM;AAAA,gBACJ;AAAA,gBACA;AAAA,gBACA,MAAM;AAAA,kBACJ;AAAA,kBACA;AAAA,kBACA,MAAM,cAAc,MAAM,EAAE,SAAS,GAAG,WAAW,8CAA8C,eAAe,UAAU,IAAI,uBAAuB,IAAI,CAAC;AAAA,kBAC1J,MAAM,cAAc,MAAM,EAAE,SAAS,GAAG,WAAW,kBAAkB,gBAAgB,UAAU,IAAI,uBAAuB,IAAI,CAAC;AAAA,gBACjI;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAED,YAAI,YAAY,KAAK,YAAY,CAAC,GAAG,IAAI,SAAU,OAAO,YAAY;AACpE,iBAAO,MAAM;AAAA,YACX;AAAA,YACA,EAAE,SAAS,KAAK,WAAW,iBAAiB,KAAK,WAAW;AAAA,YAC5DF,gBAAe,KAAK;AAAA,UACtB;AAAA,QACF,CAAC;AAED,eAAO,MAAM;AAAA,UACX;AAAA,UACA,EAAE,WAAW,oBAAoB;AAAA,UACjC,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,MAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA,MAAM;AAAA,gBACJ;AAAA,gBACA,EAAE,WAAW,YAAY,UAAU,KAAK,YAAY,CAAC,GAAG,SAAS,EAAE;AAAA,gBACnE,MAAM,cAAc,eAAe,EAAE,KAAW,CAAC;AAAA,cACnD;AAAA,YACF;AAAA,YACA,MAAM;AAAA,cACJ;AAAA,cACA;AAAA,eACC,KAAK,YAAY,CAAC,GAAG,SAAS,KAAK;AAAA,YACtC;AAAA,YACA,MAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,YACA,MAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,aAAO,MAAM;AAAA,QACX;AAAA,QACA,EAAE,WAAW,gBAAgB;AAAA,QAC7B,eAAe,IAAI;AAAA,MACrB;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": ["OrgChart", "renderChildren", "hasSiblingRight", "hasSiblingLeft"]
}
